

:Python version: Python 3.6, 3.7.3; most modules are Python2.7 compatible.


Telofinder
###########################

A python package to determine the location and the size of telomeric repeats from genome assemblies (both terminal and internal ones). Telofinder can run either on a single (multi)fasta file or on a directory containing multiple files. It outputs 3 csv and 2 bed files containing the telomere calls and their coordinates either as raw output or after merging consecutive calls"

Telomere detection is based on calculation in a sliding window of the following two metrics:
    - DNA sequence entropy < entropy_threshold (default=0.8)

    - proportion of polynucleotides (default_list = ["CC", "CA", "AC"]) >  polynuc_threshold (default=0.8)

.. image:: build/polynuc_entropy_8kb.png

.. image:: build/zoom_0_600.png

.. image:: build/zoom_7000_7300.png

From a python shell:

.. plot::
    :include-source:

    from telofinder import analyze_telom_length as atl
    import matplotlib.pyplot as plt

    df, telo_df, telo_df_merged  = atl.run_telofinder("../telofinder/data/AFH_chrI.fasta", 0.8, 0.8, 8000)
    df_res = df.reset_index()
    df_W = df_res['level_3'] == "W"

    ax1 = (
        df_res[df_W].loc[:, ["polynuc", "entropy"]]
        .plot()
        .legend(loc="center left", bbox_to_anchor=(0.75, 0.15))
    )
    ax1.set_title("AFH chr1 left")
    plt.ylim(top=1.6)
    plt.hlines(0.8, xmin = 0, xmax = 8000, colors='green', linestyles='dotted')
    plt.text(3000, 0.75, 'Threshold', ha ='left', va ='top', color='green')
    plt.hlines(1.45, xmin = 0, xmax = 246, colors='green', linestyles='solid')
    plt.text(0, 1.55, 'Terminal Telomere', ha ='left', va ='top', color='green')
    plt.hlines(1.45, xmin = 7080, xmax = 7160, colors='green', linestyles='solid')
    plt.text(6000, 1.55, 'Internal Telomere', ha ='left', va ='top', color='green')
    plt.title("Telomere detection in the first 8kb", loc="left")

    ax2 = (
        df_res[df_W].loc[:, ["polynuc", "entropy"]]
        .plot()
        .legend(loc="center left", bbox_to_anchor=(0.75, 0.15))
    )
    ax2.set_title("AFH chr1 left")
    plt.ylim(top=1.6)
    plt.xlim(0, 600)
    plt.hlines(0.8, xmin = 0, xmax = 600, colors='green', linestyles='dotted')
    plt.text(300, 0.75, 'Threshold', ha ='left', va ='top', color='green')
    plt.hlines(1.45, xmin = 0, xmax = 226, colors='green', linestyles='solid')
    plt.text(0, 1.55, 'Terminal Telomere', ha ='left', va ='top', color='green')
    plt.title("Zoom in terminal region [0-600bp]", loc="left")

    ax3 = (
        df_res[df_W].loc[:, ["polynuc", "entropy"]]
        .plot()
        .legend(loc="center left", bbox_to_anchor=(0.75, 0.15))
    )
    ax3.set_title("AFH chr1 left")
    plt.ylim(top=1.6)
    plt.xlim(7000, 7300)
    plt.hlines(0.8, xmin = 7000, xmax = 7300, colors='green', linestyles='dotted')
    plt.text(7025, 0.75, 'Threshold', ha ='left', va ='top', color='green')
    plt.hlines(1.45, xmin = 7089, xmax = 7135, colors='green', linestyles='solid')
    plt.text(7089, 1.55, 'Internal Telomere', ha ='left', va ='top', color='green')
    plt.title("Zoom in internal region [7000-7300bp]", loc="left")



Installation
============

install (mini)conda:

    see https://docs.conda.io/projects/conda/en/latest/user-guide/install/

add channels:

.. code-block:: bash

    $ conda config --add channels conda-forge bioconda

install the telofinder package:

.. code-block:: bash

    $ git clone https://github.com/GillesFischerSorbonne/telofinder.git

    $ cd telofinder

    $ conda env

    $ python setupy.py install



Usage
=====
    
.. code-block:: bash

    $ conda activate telofinder

    $ python telofinder path_to_file(s)


telofinder runs both on single and multiple (multi)fasta file(s).\

telofinder outputs 3 csv and 2 bed files containing the telomere calls and their coordinates, either as raw output or after merging consecutive calls



Reference
=========

.. automodule:: telofinder.analyze_telom_length
    :members:
    :undoc-members:





Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

